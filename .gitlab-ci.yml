image: redmic/web-gitlab

stages:
  - pre-build
  - test-code
  - build
  - package
  - test-package
  - deploy
  - test-deploy

prepare-unbuilt-version:
  stage: pre-build
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - type yarn grunt java
    - yarn install || yarn install
    - grunt preBuild
  only:
    - branches
  except:
    - master
    - schedules
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - node_modules/
      - public/javascript/redmic-widgets/node_modules/
      - public/javascript/templates/node_modules/
      - public/stylesheets/node_modules/
  artifacts:
    name: ${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}
    expire_in: 1 day
    paths:
      - node_modules/
      - public/javascript/proj4js/dist/proj4.js
      - public/javascript/redmic-widgets/src/app/
      - public/javascript/templates/dist/
      - public/stylesheets/style.styl
      - public/stylesheets/src/
      - public/stylesheets/submodules/

run-unit-tests:
  stage: test-code
  script: grunt test
  only:
    - branches
  except:
    - master
    - schedules
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - node_modules/
      - public/javascript/redmic-widgets/node_modules/
      - public/javascript/templates/node_modules/
      - public/stylesheets/node_modules/
    policy: pull

run-modules-functional-tests:
  stage: test-code
  script:
    - echo $(head -1 /etc/hosts | cut -f1) redmic.local >> /etc/hosts
    - npm start -- -p 80 &
    - grunt test-functional-local --functionalSuites=tests/functional/modules/**/!\(*Script\).js --headless
  only:
    - branches
  except:
    - master
    - schedules
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - node_modules/
      - public/javascript/redmic-widgets/node_modules/
      - public/javascript/templates/node_modules/
      - public/stylesheets/node_modules/
    policy: pull

prepare-built-version:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - type yarn grunt java
    - yarn install || yarn install
    - grunt
  only:
    - branches
    - tags
  except:
    - master
    - schedules
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - node_modules/
      - public/javascript/redmic-widgets/node_modules/
      - public/javascript/templates/node_modules/
      - public/stylesheets/node_modules/
    policy: pull
  artifacts:
    name: ${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}
    expire_in: 1 week
    paths:
      - dist*.tar.gz

docker-build-commit:
  stage: package
  image: redmic/docker-gitlab
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - branches
  except:
    - master
    - schedules
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-latest .
    - docker push ${CI_REGISTRY_IMAGE}

docker-build-tag:
  stage: package
  image: redmic/docker-gitlab
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - tags
  except:
    - schedules
  script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} -t ${CI_REGISTRY_IMAGE}:latest .
    - docker push ${CI_REGISTRY_IMAGE}

container_scanning:
  stage: test-package
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  only:
    - branches
    - tags
  except:
    - master
    - schedules
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-sast-container-report.json -l clair.log -w clair-whitelist.yml ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} || true
  artifacts:
    paths: [gl-sast-container-report.json]

deploy-dev:
  stage: deploy
  image: redmic/docker-gitlab
  variables:
    DOCKER_DRIVER: overlay2
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    SERVICE: ${CI_PROJECT_NAME}
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}
    IMAGE_TAG: ${CI_COMMIT_SHA}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
    OAUTH_CLIENT_SECRET: ${DEV_OAUTH_CLIENT_SECRET}
    PUBLIC_HOSTNAME: https://appdev.${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
      OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
  environment:
    name: dev
    url: https://appdev.${DEV_PUBLIC_HOSTNAME}
  only:
    - dev
  except:
    - schedules

deploy-supporting-branch:
  stage: deploy
  image: redmic/docker-gitlab
  variables:
    DOCKER_DRIVER: overlay2
    SSH_REMOTE: ${DEV_SSH_REMOTE}
    SERVICE: ${CI_PROJECT_NAME}
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}
    IMAGE_TAG: ${CI_COMMIT_SHA}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.dev.yml
    OAUTH_CLIENT_SECRET: ${DEV_OAUTH_CLIENT_SECRET}
    PUBLIC_HOSTNAME: https://appdev.${DEV_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
      OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
  environment:
    name: dev
    url: https://appdev.${DEV_PUBLIC_HOSTNAME}
  only:
    - branches
  except:
    - master
    - dev
    - schedules
  when: manual

run-basic-user-functional-tests:
  stage: pre-build
  tags:
    - client
    - functional
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - type yarn grunt java
    - yarn install || yarn install
    - >
      grunt test-functional-local --server-url="https://appdev.${DEV_PUBLIC_HOSTNAME}" --user="${REDMIC_USER}"
      --pass="${REDMIC_PASS}" --role=administrator --suitesGroups=common --headless
  when: manual
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - node_modules/
    policy: pull
  artifacts:
    name: ${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}
    expire_in: 1 month
    when: always
    paths:
      - "test_reports/test-functional-local*"

run-basic-guest-functional-tests:
  stage: pre-build
  tags:
    - client
    - functional
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - type yarn grunt java
    - yarn install || yarn install
    - >
      grunt test-functional-local --server-url="https://appdev.${DEV_PUBLIC_HOSTNAME}" --role=guest --headless
      --suitesGroups=catalog
  when: manual
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - node_modules/
    policy: pull
  artifacts:
    name: ${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}
    expire_in: 1 month
    when: always
    paths:
      - "test_reports/test-functional-local*"

run-functional-tests:
  stage: test-deploy
  tags:
    - client
    - functional
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - type yarn grunt java
    - yarn install || yarn install
    - >
      grunt test-functional-local-parallel --server-url="https://appdev.${DEV_PUBLIC_HOSTNAME}" --user="${REDMIC_USER}"
      --pass="${REDMIC_PASS}"
  only:
    - schedules
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths:
      - node_modules/
    policy: pull
  artifacts:
    name: ${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}
    expire_in: 1 month
    when: always
    paths:
      - "test_reports/test-functional-local*/"

deploy-pro:
  stage: deploy
  image: redmic/docker-gitlab
  variables:
    DOCKER_DRIVER: overlay2
    SSH_REMOTE: ${PRO_SSH_REMOTE}
    SERVICE: ${CI_PROJECT_NAME}
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}
    IMAGE_TAG: ${CI_COMMIT_TAG}
    COMPOSE_FILE: docker-compose.tmpl.yml:docker-compose.prod.yml
    OAUTH_CLIENT_SECRET: ${PRO_OAUTH_CLIENT_SECRET}
    PUBLIC_HOSTNAME: https://${PRO_PUBLIC_HOSTNAME}
  services:
    - docker:dind
  script:
    - >
      deploy.sh IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${IMAGE_TAG} COMPOSE_FILE=${COMPOSE_FILE}
      OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET} PUBLIC_HOSTNAME=${PUBLIC_HOSTNAME}
  environment:
    name: pro
    url: https://${PRO_PUBLIC_HOSTNAME}
  only:
    - tags
  except:
    - schedules
  when: manual
